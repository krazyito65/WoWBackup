
WowLua_DB = {
	["currentPage"] = 11,
	["fontSize"] = 14,
	["pages"] = {
		{
			["locked"] = true,
			["name"] = "Encounter Timer",
			["content"] = "-- Encounter Timer\nfunction display()\n   if WA_xXx_Combat_Start ~=nil then\n      local combatTime = GetTime()-WA_xXx_Combat_Start\n      return string.format(\"%02d:%02d\", combatTime/60, combatTime%60)\n   else\n      return \"12:05\"\n   end\nend\n\n-- Events: INSTANCE_ENCOUNTER_ENGAGE_UNIT, PLAYER_REGEN_DISABLED, PLAYER_REGEN_ENABLED\nfunction trigger()\n   if (UnitExists(\"boss1\") and UnitIsDeadOrGhost(\"player\")) or UnitAffectingCombat(\"player\") or InCombatLockdown() then\n      WA_xXx_Combat_Start = WA_xXx_Combat_Start or GetTime()\n      return true\n   else\n      WA_xXx_Combat_Start = nil\n      return false\n   end\nend\n\n-- Custom Hide\nfunction Untrigger()\n   return WA_xXx_Combat_Start == nil\nend",
		}, -- [1]
		{
			["locked"] = true,
			["name"] = "Timer / Stacking trinket",
			["content"] = "\n--Wushoolay trinket example.\n\nfunction display()\n   local name,_,_,_,_,_,expires = UnitBuff(\"player\", \"Wushoolay's Lightning\"); -- look for the timer debuff on the player\n   if expires == nil then\n      expires = 0; -- error checking\n   end\n   return format(\"%.1f\",(expires - GetTime()));  \n   --[[ %.1f is string formating for 1 decimal place of the float\nThis API function returns a time in the future (?Epoch time?), which is stored in expires.  When subtracting furtire time from current time, you get remaining seconds.]]\nend\n\n--Trigger\n-- Use the stacking debuff as the player buff trigger",
		}, -- [2]
		{
			["locked"] = true,
			["name"] = "Common functions",
			["content"] = "-- Common functions to use\n\nlocal power = UnitPower(\"unit\" , powerType); -- http://www.wowwiki.com/API_UnitPower, powerType optional\n--[[\nArguments\n  UnitId \n      String - The UnitID of the unit whose power should be returned\n  powerType \n      Number (optional) - The power type of the unit whose power should be returned\n\nReturns\n  power \n      Number - the unit's current power level.\n]]\n\n\nlocal inLockdown = InCombatLockdown() -- http://www.wowwiki.com/API_InCombatLockdown\n--[[ \nReturns\n  inLockdown \n      Flag - 1 if lockdown restrictions are currently in effect, nil otherwise.\n]]",
		}, -- [3]
		{
			["name"] = "Check if boss is active",
			["content"] = "-- Check if boss is active\n\nfunction()\n   if UnitExists(\"boss1\") then\n      local i = 0\n      local boss_names = {\"Siegecrafter Blackfuse\"}\n      for i=1,#boss_names do -- # means for every element in the list\n         if UnitName(\"boss1\")==boss_names[i] then\n            return true\n         end\n      end\n   end\n   return false\nend",
		}, -- [4]
		{
			["locked"] = true,
			["name"] = "How to use ENCOUNTER flags",
			["content"] = "--events: ENCOUNTER_START, ENCOUNTER_END\n\nfunction trigger(event, id, name, diff, size, status)\n   if event == \"ENCOUNTER_START\" then\n      WA_event = event\n      WA_encounterID = id \n      WA_encounterName = name\n      WA_difficulty = diff\n      WA_raidSize = size\n      \n   elseif event == \"ENCOUNTER_END\" then\n      WA_event = event\n      WA_encounterID = id \n      WA_encounterName = name\n      WA_difficulty = diff\n      WA_raidSize = size\n      WA_endStatus = status       \n   end\nend\n\n\nfunction display()\n   local event, id, name, diff, size, status\n   \n   event = WA_event\n   id = WA_encounterID\n   name = WA_encounterName\n   diff = WA_difficulty\n   size = WA_raidSize\n   status = WA_endStatus\n   \n   return \"Event: \" .. event ..\"\\nID: \" .. id .. \"\\nName: \" .. name .. \"\\nDifficulty: \" .. diff ..\"\\nRaid Size: \"..  size\n   \nend\n",
		}, -- [5]
		{
			["locked"] = true,
			["name"] = "Stat Buff Checker",
			["content"] = "--This is a check for stats buff aura.\n\nfunction trigger() \n   if not WA_statsBuff_last_check or WA_statsBuff_last_check + 2 < GetTime() then\n      -- the number 2 in the line above is time period in seconds how often the whole raid will be scanned\n      WA_statsBuff_last_check = GetTime()\n      -- WA_Bok_or_MotW_last_check is a global variable, you should rename it in all 3 occurrences if youre duplicating this trigger\n      WA_statsBuff_unbuffedPlayers = {}\n      local unbuffedPlayers = WA_statsBuff_unbuffedPlayers\n      -- WA_Bok_or_MotW_unbuffedPlayers is another global variable, rename it in all 4 occurrences if youre duplicating this trigger\n      -- its occuring in \n      \n      local localizedClass, englishClass, classIndex = UnitClass(\"player\")\n      local rangeIndex = 1\n      if englishClass == \"DRUID\" then  rangeIndex = 1 end\n      if englishClass == \"PALADIN\" then rangeIndex = 2 end\n      if englishClass == \"MONK\" then rangeIndex = 3 end\n      \n      local auraTable = {\"Mark of the Wild\", \"Blessing of Kings\", \"Legacy of the Emperor\", \"Embrace of the Shale Spider\"} \n      -- player will pass the check if he/she has at least one buff in this table\n      local myZone = GetZoneText()\n      \n      for index = 1, GetNumGroupMembers() do\n         local name, _, subgroup, _, _, _, zone, online, isDead, _, _ = GetRaidRosterInfo(index)\n         if online and not isDead and 1 == IsSpellInRange(auraTable[rangeIndex],name) then\n            --[[ zone == myZone    -- checking if the player is in the same zone ie \"Dragon Soul\", \"Stormwind City\" etc.  \n                 1 == IsSpellInRange(auraTable[1], \"raid\"..index)    -- checking if the player is in cast range  ]]\n            local playerBuffed = false\n            for auraIndex = 1, #auraTable do\n               local buffActive = UnitAura((name), auraTable[auraIndex])\n               playerBuffed = playerBuffed or buffActive ~= nil \n            end\n            if not playerBuffed then\n               table.insert(unbuffedPlayers, name)\n            end\n         end\n      end\n      return unbuffedPlayers[1] ~= nil\n   end\nend\n\n--Untrigger\n\nfunction untrigger()\n   return #WA_statsBuff_unbuffedPlayers == 0\n   -- this is the same variable as in Custom Trigger\nend\n\n\n--Name\n\nfunction --[[Name Info]]()\n   local unbuffedPlayers = WA_statsBuff_unbuffedPlayers -- this is the same variable as in Custom Trigger\n   local maxPlayersIndividualyShown = 3\n   local returnString = \"\"\n   \n   if #unbuffedPlayers > maxPlayersIndividualyShown then\n      returnString = #unbuffedPlayers..\" players\"\n   else \n      for i = 1, #unbuffedPlayers do\n         returnString = returnString..(unbuffedPlayers[i])..\"\\n\"\n      end\n   end\n   \n   return returnString\nend",
		}, -- [6]
		{
			["locked"] = true,
			["name"] = "someone is dead",
			["content"] = "--check every frame\nfunction trigger()\n   \n   local startTime, duration = 0, 0\n   WA_someoneIsDead_deadPlayerTable = {} -- Gobal Variable that stores all the dead players\n   \n   local _, englishClass = UnitClass(\"player\") -- gets the players class\n   if englishClass == \"DRUID\" then\n      startTime, duration = GetSpellCooldown(20484) -- get rebirth cooldown\n   elseif englishClass == \"WARLOCK\" then\n      startTime, duration = GetSpellCooldown(20707) -- get soulstone cooldown\n   elseif englishClass == \"DEATHKNIGHT\" then\n      startTime, duration = GetSpellCooldown(61999) -- get raise ally cooldown\n   else \n      return false -- if none of these classes, it shouldnt do anything (though this wont load any way with load parameters)\n   end\n   \n   \n   --//Start figuring out if we should trigger//\n   if (startTime > 0 and duration > 0) then -- do nothing if the spell is on cooldown.\n      return false\n   else\n      local deadPlayers = WA_someoneIsDead_deadPlayerTable  \n      --Trying to follow what another piece of code does. Not sure why this is used.\n      \n      local myZone = GetZoneText() -- Saves the zone I am currently in.\n      \n      for index =1, GetNumGroupMembers() do -- This cycles through every raid member\n         local name, _, _, _, _, _, zone, online, isDead,_,_,combatRole = GetRaidRosterInfo(index) \n         -- Saves info for each player we are cycling through.\n         \n         if online and isDead and  (combatRole == \"HEALER\" or combatRole == \"TANK\") and  zone == myZone then\n            -- This if statement triggers if the player is online, dead, is a healer or tank, and is in the same zone as me.\n            table.insert(deadPlayers, name) -- inserts  the players name into the table.\n         end\n         \n      end\n      \n      return deadPlayers[1] ~= nil -- returns true if there is someone in the list.\n      \n   end\nend\n\nfunction untrigger()\n   \n   local startTime, duration = 0, 0\n   --Funtion only triggers when someone dies or resurrects (because of PLAYER_DEAD/ALIVE event)\n   local _, englishClass = UnitClass(\"player\") -- gets the players class\n   if englishClass == \"DRUID\" then\n      startTime, duration = GetSpellCooldown(20484) -- get rebirth cooldown\n   elseif englishClass == \"WARLOCK\" then\n      startTime, duration = GetSpellCooldown(20707) -- get soulstone cooldown\n   elseif englishClass == \"DEATHKNIGHT\" then\n      startTime, duration = GetSpellCooldown(61999) -- get raise ally cooldown\n   end\n   \n   if (startTime > 0 and duration > 0) then -- do nothing if the spell is on cooldown.\n      return true\n   else\n      \n      \n      return #WA_someoneIsDead_deadPlayerTable == 0 \n      -- If there are 0 players in the table, return true\n      -- this is the same variable as in Custom Trigger\n   end\n   \n   \nend\n\nfunction nameinfo()\n   \n   local deadPlayers = WA_someoneIsDead_deadPlayerTable -- save global table locally\n   local maxPlayersIndividuallyShown = 3 --if there are more than 4 players dead, show the number of players\n   local returnString = \"\" -- start with an empty string.\n   \n   if #deadPlayers > maxPlayersIndividuallyShown then -- if the number of dead players is greater than 3, show the number\n      returnString = #deadPlayers .. \" players\"\n   else\n      for i = 1, #deadPlayers do -- else, return names of every player seperated by a new line.\n         returnString = returnString..(deadPlayers[i])..\"\\n\"\n      end\n   end\n   \n   return returnString\n   \nend\n\n\n\n\n\n",
		}, -- [7]
		{
			["locked"] = true,
			["name"] = "Multistrike / crit events",
			["content"] = "--EVENTS: COMBAT_LOG_EVENT_UNFILTERED\n\n\n--This specific IDs are meant for Pyroblast and fireball multistrikes, excluding the Pyroblast periodic damage\nfunction trigger(event,time,type,_,sourceGUID,sourcename,_,_,destGUID,destname,_,_,spellid,spellname,_,_,_,_,_,_,_,spellcritical,_,_,_,spellmultistrike)\n   if event == \"COMBAT_LOG_EVENT_UNFILTERED\" and sourceGUID == UnitGUID(\"player\") then\n      if (spellid == 133 or spellid == 11366) and spellmultistrike == true and type ~= \"SPELL_PERIODIC_DAMAGE\" then -- Matches Spell and Multistrike\n         LastMSTime = GetTime();\n         return true;\n      end\n   end\nend\n\n\n\nfunction untrigger()\n   local CurrentTime = GetTime();\n   \n   if LastMSTime == nil or LastMSTime + 2 <= CurrentTime then\n      return true;\n   else\n      return false;\n   end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
		}, -- [8]
		{
			["locked"] = true,
			["name"] = "Clarity of Will focus bar",
			["content"] = "-- Clarity of Will - Focus progress bar\n-- Scan every Frame\n\nfunction () -- Display\n   local name,_,icon, count,debuffType,duration,expirationTime,unitCaster,_,_,spellid,_,_,_,value=UnitBuff(\"focus\", \"Clarity of will\", nil, \"PLAYER\") -- Gets the Clarity of Will buff from your target that has been casted by the player\n   if(value > 999999) then value = math.floor(value/1000000) .. \"m\" end\n   if(value > 999)then value = math.floor(value/1000) .. \"k\" end \n   local returnVal = format(\"%.1f\", (expirationTime - GetTime())) -- Formats the duration of the buff into a readable format.\n   returnVal = value .. \" - \" .. returnVal -- Concatanate the value of the shield and the duration of the buff\n   return returnVal \nend\n\n\n\n\nfunction() -- Trigger\n   local name,_,icon, count,debuffType,duration,expirationTime,unitCaster,_,_,spellid,_,_,_,value=UnitBuff(\"focus\", \"Clarity of will\", nil, \"PLAYER\")  -- Gets the Clarity of Will buff from your target that has been casted by the player\n   exists = UnitExists(\"focus\")\n   \n   if spellid == 152118 then\n      return true\n   else \n      return false\n   end   \nend\n\nfunction() -- Untrigger\n   exists = UnitExists(\"focus\") -- checks if a focus target exsits\n   if exists == 1 then\n      return false\n   else \n      return true\n   end\n   \nend\n\n\n\nfunction ()  -- Duration\n   local name,_,icon, count,debuffType,duration,expirationTime,unitCaster,_,_,spellid,_,_,_,value=UnitBuff(\"focus\", \"Clarity of will\", nil, \"PLAYER\")  -- Gets the Clarity of Will buff from your target that has been casted by the player\n   \n   \n   local health = UnitHealth(\"focus\");\n   local maxValue = health/2;\n   \n   return value, maxValue, true\n   \nend\n\n\n\n\n\n\n\n\n\n\n\n",
		}, -- [9]
		{
			["locked"] = true,
			["name"] = "Shield block example",
			["content"] = "--Sheild Block stuff\n\nfunction(event, ...)\n   if event == \"COMBAT_LOG_EVENT_UNFILTERED\" then\n      local stamp, subevent, _, unit, _, _, _, target = ...\n      WA_BlockedDamage = WA_BlockedDamage or 0\n      if subevent == \"SPELL_CAST_SUCCESS\" then\n         local spell = select(12, ...)\n         if  unit == UnitGUID(\"player\") and spell == 2565 then\n            WA_RecordingBlocks = true\n            WA_ConfirmBlock = {}\n            WA_BlockedDamage = 0\n            return true\n         end\n      elseif WA_RecordingBlocks and  target == UnitGUID(\"player\") then\n         if subevent == \"SPELL_AURA_REMOVED\"  then\n            local aura =  select(12, ...)\n            if aura == 145054 or aura == 132404 then\n               WA_RecordingBlocks = false\n               return true\n            end\n            return false\n         end\n         \n         local blockParam\n         if subevent == \"SPELL_DAMAGE\" then\n            blockParam = 19\n         elseif subevent == \"SWING_DAMAGE\" then\n            blockParam = 16\n         elseif subevent == \"ENVIRONMENTAL_DAMAGE\" then\n            blockParam = 17\n         end\n         if blockParam then\n            local blocked = select(blockParam, ...)\n            WA_BlockedDamage = WA_BlockedDamage + (((blocked and blocked > 0) and blocked) or 0)\n            return true\n         end\n         if subevent == \"SWING_MISSED\" and select(12, ...) == \"ABSORB\" then\n            local amount = select(14, ...)\n            local mastery = GetMasteryEffect() / 100\n            local averageBlock = (mastery * 0.6) + ((1 - mastery) * 0.3)\n            local estimate = floor((amount / averageBlock) - amount)\n            WA_ConfirmBlock[#WA_ConfirmBlock+1] = {stamp, estimate}\n         end\n      end\n   elseif event == \"UNIT_COMBAT\" then\n      local target, classification, desc, dmg = ...\n      if WA_ConfirmBlock and #WA_ConfirmBlock > 0 and target == \"player\" and classification == \"BLOCK\" and desc == \"ABSORB\" then            \n         local when, amount = unpack(WA_ConfirmBlock[#WA_ConfirmBlock])\n         \n         if time() - when < 2 then\n            WA_BlockedDamage = WA_BlockedDamage + amount\n            WA_ConfirmBlock[#WA_ConfirmBlock] = nil\n            return true\n         end\n         \n         WA_ConfirmBlock[#WA_ConfirmBlock] = nil\n      end        \n   end\nend",
		}, -- [10]
		{
			["locked"] = true,
			["name"] = "Output Hex Color",
			["content"] = "\n---- CLASS COLOR, HEX COLOR BELOW\n--setClassColor(playerName) - returns the player name coloered with theri class color.  Player name must be exact name.\nlocal setClassColor = function(playerName) -- local function to determine the player class and color it\n   local  _, playerClass = UnitClass(playerName) -- Determines the player class\n   if playerClass == \"DEATHKNIGHT\" then\n      return \"|cFFC41F3B\" .. playerName .. \"|r\" -- Place color tags based on class colors on http://www.wowwiki.com/Class_colors\n   elseif playerClass == \"DRUID\" then\n      return \"|cFFFF7D0A\" .. playerName .. \"|r\"\n   elseif playerClass == \"HUNTER\" then\n      return \"|cFFABD473\" .. playerName .. \"|r\"\n   elseif playerClass == \"MAGE\" then\n      return \"|cFF69CCF0\" .. playerName .. \"|r\"\n   elseif playerClass == \"MONK\" then\n      return \"|cFF00FF96\" .. playerName .. \"|r\"\n   elseif playerClass == \"PALADIN\" then\n      return \"|cFFF58CBA\" .. playerName .. \"|r\"\n   elseif playerClass == \"PRIEST\" then\n      return \"|cFFFFFFFF\" .. playerName .. \"|r\"\n   elseif playerClass == \"ROGUE\" then\n      return \"|cFFFFF569\" .. playerName .. \"|r\"\n   elseif playerClass == \"SHAMAN\" then\n      return \"|cFF0070DE\" .. playerName .. \"|r\"\n   elseif playerClass == \"WARLOCK\" then\n      return \"|cFF9482C9\" .. playerName .. \"|r\"\n   elseif playerClass == \"WARRIOR\" then\n      return \"|cFFC79C6E\" .. playerName .. \"|r\"\n   else\n      return \"|cFFF900FF\" .. playerName .. \"|r\"\n   end\nend\n\n\n\n\n-- Used in custom color functions\n-- HexColor(\"color\"[, alpha]) - Returns RGB and alhpa values\n-- @color string - 6 digit hex code with or without the leading #. Ex: #C41F3B\n-- @alpha number  - (Optional) Int between 0 and 1 for opacity of the color. 1 being most visible.\n\n\nlocal HexColor = function(color, alpha)\n   local COLOR_SCALE = 0xff\n   local COLOR_PREFIX = '0x'\n   local red, green, blue = 0, 0, 0\n   \n   -- color = '#ff7d0a'\n   if color:sub(1,1) == '#' and string.len(color) == 7 then\n      red = tonumber(COLOR_PREFIX..color:sub(2,3)) / COLOR_SCALE\n      green = tonumber(COLOR_PREFIX..color:sub(4,5)) / COLOR_SCALE\n      blue = tonumber(COLOR_PREFIX..color:sub(6,7)) / COLOR_SCALE\n   elseif color:sub(1,1) ~= '#' and string.len(color) == 6 then\n      red = tonumber(COLOR_PREFIX..color:sub(1,2)) / COLOR_SCALE\n      green = tonumber(COLOR_PREFIX..color:sub(3,4)) / COLOR_SCALE\n      blue = tonumber(COLOR_PREFIX..color:sub(5,6)) / COLOR_SCALE\n   else\n      return 0,0,0,1\n   end\n   \n   alpha = alpha or 1\n   \n   \n   return red, green, blue, alpha\nend\n\n\n\n\n\n\n\n\n-- First try at the function\n-- Used in custom color animations.\n-- HexColor(\"red\", \"green\", \"blue\"[, alpha]) - returns 4 values with corresponding colors.\n-- @red string - 2 digit hex code\n-- @green string - 2 digit hex code\n-- @blue string - 2 digit hex code\n\nlocal HexColor = function(red, green, blue, alpha)\n   local colorDivide = 0xff\n   red = tonumber('0x'..red) / colorDivide\n   green = tonumber('0x'..green) / colorDivide\n   blue = tonumber('0x'..blue) / colorDivide\n   \n   alpha = alpha or 1\n   \n   return red, green, blue, alpha\nend",
		}, -- [11]
		{
			["locked"] = true,
			["name"] = "Raid Cooldown Notification with ",
			["content"] = "--Trigger\nfunction(event, msg, author, _, _, _, _, _, _, channel)\n   \n   \n   --Raid Notification Weak Aura\n   --Author: Krazyito - Mal'ganis - US\n   --Takes text in specificed channel to alert player someone wants them to use their cooldown.\n   --Text syntax: \"PlayerName, Spellid\"\n   --Edit the channel name below and in 'Actions' for custom channel\n   --Version 1.3\n   \n   --Changes:\n   --1.1: Got support from ERT.\n   --1.2: Some support for single target CDs, the tank that wants it needs to click the spell himself (from ERT) for it to show up with his name. (first version bugged)\n   --1.3: Fixed single target section. Now when a single target cooldown is sent by it player, the name of the person who sent the aura will appear.\n   \n   \n   if event == \"CHAT_MSG_CHANNEL\" and channel == \"srcds\" then -- if something is said in this channel -- EDIT THIS CHANNEL NAME\n      \n      \n      \n      local stringTable = aura_env.DoSplit(msg, \", \") --parse the string into a table\n      if stringTable[1] == aura_env.playerName then -- if the playername is mentioned\n         \n         \n         aura_env.sender = string.gsub(author, \"%-[^|]+\", \"\") -- store the name of the person who sent the command and remove their realm name.\n         \n         \n         local class = aura_env.classTable[aura_env.playerClassIndex] -- look up class to minimize checks\n         for k,v in pairs(class) do  -- check the table in class\n            \n            if tostring(k) == stringTable[2] then -- find macthing spell id\n               \n               aura_env.ouputIcon = class[k] -- save the icon to output\n               return true -- Spell is in the list\n               \n            end\n         end\n      end\n   end\n   \n   return false\nend\n\n\n--On Init\n\nlocal split = function (msg, inSplitPattern, outResults ) -- string parser\n   \n   if not outResults then\n      outResults = { }\n   end\n   local theStart = 1\n   local theSplitStart, theSplitEnd = string.find(msg, inSplitPattern, theStart )\n   while theSplitStart do\n      table.insert( outResults, string.sub(msg, theStart, theSplitStart-1 ) )\n      theStart = theSplitEnd + 1\n      theSplitStart, theSplitEnd = string.find(msg, inSplitPattern, theStart )\n   end\n   table.insert( outResults, string.sub(msg, theStart ) )\n   return outResults\nend\n\naura_env.DoSplit = split -- save the above function as a global to this aura\naura_env.playerName = UnitName(\"player\") -- get the current player name\nlocal _, englishClass, classIndex = UnitClass(\"player\") -- get current player class\naura_env.playerClass = englishClass -- save it globally in the aura\naura_env.playerClassIndex = classIndex\naura_env.ouputIcon = \"init\"\naura_env.sender = \"init\"\n\n\n\n\naura_env.classTable = {  -- Table for storing the spell icons. an '!' indicated single target cooldown which will include the name of the person who sent the aura.\n   [1] = { -- Warrior\n      [97462] = \"ability_toughness\", -- Rallying Cry\n      [114030] = \"!ability_warrior_vigilance\" -- Vigilance\n   },\n   \n   [2] = { -- Paladin\n      [31821] = \"spell_holy_auramastery\", -- Devo Aura\n      [31842] = \"spell_holy_avenginewrath\", -- Healing AW\n      [6940] = \"!spell_holy_sealofsacrifice\" -- Hand of Sacrifice\n   }, \n   \n   [3] = { -- Hunter\n      [172106] = \"ability_hunter_aspectofthefox\" -- Fox\n   },  \n   \n   [4] = { -- Rogue\n      [76577] = \"ability_rogue_smoke\" -- Smoke Bomb\n   },\n   \n   [5] = { -- Priest\n      [62618] = \"spell_holy_powerwordbarrier\", -- Power Word: Barrier\n      [64843] = \"spell_holy_divinehymn\", -- Divine Hymn\n      [15286] = \"spell_shadow_unsummonbuilding:\", -- Vampiric Embrace\n      [47788] = \"!spell_holy_guardianspirit\", -- Guardian Spirit\n      [33206] = \"!spell_holy_painsupression\", -- Pain Suppression\n      [1022] = \"!spell_holy_sealofprotection\" -- Hand of Protection\n   },\n   \n   [6] = { -- DK\n      [51052] = \"spell_deathknight_antimagiczone\" -- AMZ\n   },\n   \n   [7] = { -- Shaman\n      [98008] = \"spell_shaman_spiritlink\", -- Spirit Link Totem\n      [108280] = \"ability_shaman_healingtide\", -- Healing Tide Totem\n      [108281] = \"ability_shaman_ancestralguidance\", -- AG\n      [114052] = \"spell_fire_elementaldevastation\" -- Healing Ascendance\n   },\n   \n   [8] = { -- Mage\n      [159916] = \"spell_magic_managain\" -- Amp Magic\n   },\n   \n   [9] = { -- Warlock\n   },\n   \n   [10] = { -- Monk\n      [115310] = \"spell_monk_revival\", -- Revival\n      [116849] = \"!ability_monk_chicocoon\"-- Life Cocoon\n   },\n   \n   \n   [11] = { -- Druid\n      [740] = \"spell_nature_tranquility\", -- Tranquility\n      [106898] = \"spell_druid_stampedingroar_cat\", -- Stampeding Roar\n      [102342] = \"!spell_druid_ironbark\", -- Ironbark\n      [33891] = \"ability_druid_improvedtreeform\" -- Tree of Life\n   }\n   \n   \n}\n--[[\n\n--custom code by ERT author\nlocal function SpecialClick(data)\n    local chat,channel={GetChannelList()}\n    for i=1,#chat,2 do\n        if chat[i+1]==\"srcds\" then -- EDIT THE CHANNEL NAME\n            channel=chat[i]\n            break\n        end\n    end\n    \n    if not channel then return end\n    SendChatMessage(data.name..\", \"..data.db[1],\"CHANNEL\",nil,channel)\nend\n\nif _G.GExRT and _G.GExRT.A.ExCD2 then\n    _G.GExRT.A.ExCD2.db.plugin.UpdateRoster=function(line) line.specialClick=SpecialClick end\nend\n-------------------------\n\n]]\n\n\n--Display\nfunction()\n   \n   \n   if  aura_env.ouputIcon then  \n      \n      if string.sub(aura_env.ouputIcon, 1, 1) == \"!\" then -- '!' indicates its a single target cooldown\n         return \"USE |TInterface\\\\Icons\\\\\".. string.sub(aura_env.ouputIcon, 2) .. \":16|t\" .. aura_env.sender -- include the icon and sender name.\n      else \n         return \"USE |TInterface\\\\Icons\\\\\".. aura_env.ouputIcon .. \":16|t\" -- show icon\n      end\n      \n   end\nend",
		}, -- [12]
		{
			["locked"] = true,
			["name"] = "eye of anzu",
			["content"] = "--Trigger\nfunction (_, _, subevent, _, _, _, _, _, _, destName, _, _,spellID)\n   \n   --[[ \n\nhttp://wow.gamepedia.com/COMBAT_LOG_EVENT_UNFILTERED\n\nTESTING OUTSIDE RAID: \n1 COMBAT_LOG_EVENT_UNFILTERED \n2 1435254905.943 \n3 SPELL_AURA_APPLIED \n4 false \n5 Player-3684-07250FBC \n6 Krazyito \n7 1297 \n8 0 \n9 Player-3684-07250FBC \n10 Krazyito \n11 1297 \n12 0 \n13 774\n14 Rejuvenation \n15 8 \n16 BUFF\n       \n\nLOGS:\n1 COMBAT_LOG_EVENT_UNFILTERED \n2 6/24 21:39:11.111 \n3 SPELL_AURA_APPLIED,\n4 0000000000000000,\n5 nil,\n6 0x511,\n7 0x0,\n8 Player-3684-08072183,\n9 \"Afflak-Mal'Ganis\",\n10 0x512,\n11 0x0,\n12 179202,\n13\"Eye of Anzu\",\n14 0x1,\n15 BUFF\n    ]]\n   \n   \n   if subevent == \"SPELL_AURA_APPLIED\" and spellID == 179202  then\n      aura_env.EyeHolder = destName\n   end\n   \n   \n   return true\n   \n   \n   \nend",
		}, -- [13]
		{
			["untitled"] = true,
			["name"] = "Untitled 28",
			["content"] = "--display\nfunction()\n   \n   aura_env.returnString = \"\" -- this is the string that will display the table\n   \n   for k,v in pairs(aura_env.hasDebuffTable) do -- for every item in this table\n      --print (k,v)\n      local value = v\n      local timer = string.format(\"%.1f\",  aura_env.debuffTimer[k] - GetTime()) -- store the timer for the first person\n      local timerColor = \"\"\n      \n      if tonumber(timer) >= 10 then -- red #eb260a\n         timerColor = \"|cFFEB260A\" .. timer .. \"|r\"\n         value = \"|cFFEB260A\" .. value .. \"|r\"\n         \n         \n         \n      else-- if  tonumber(timer) <= 10 then -- green #47dc38\n         timerColor = \"|cFF47DC38\" .. timer .. \"|r\"\n         value = \"|cFF47DC38\" .. value .. \"|r\"\n      end\n      \n      \n      aura_env.returnString = aura_env.returnString .. \"\\124n\".. string.format(\"%s - %s\", timerColor, value)  -- store the information on the display string\n      \n      \n      \n      if tonumber(timer) <= .1 then -- check if the timer is expired\n         table.remove(aura_env.debuffTimer, k) -- remove the items from the table.\n         table.remove(aura_env.hasDebuffTable, k)\n      end\n      \n      \n   end\n   \n   \n   \n   return aura_env.returnString -- return the table.\nend\n\n\n-- Trigger\n\n--Version 1.2: July 5th 2015\n\nfunction(event, timestamp, subevent, hideCaster, sourceGUID, sourceName, sourceFlags, sourceRaidFlags, destGUID, destName, destFlags, destRaidFlags,  spellid, spellName)\n   \n   local SPELL = \"Digest\"\n   --  local SPELL = \"Rejuvenation\"\n   \n   \n   \n   if subevent == \"SPELL_AURA_APPLIED\" and spellName == SPELL then\n      \n      local name =  string.gsub(destName, \"%-[^|]+\", \"\") -- remove realm names, if any\n      -- local name = destName -- remove realm names, if any\n      \n      table.insert(aura_env.debuffTimer, GetTime() + 30) -- insert into the timer table 30s to countdown from.\n      table.insert(aura_env.hasDebuffTable,  name) -- insert the person who has the debuff\n      \n      \n   elseif  subevent == \"SPELL_AURA_REMOVED\" and spellName == SPELL then -- check if the aura is removed.\n      \n      local name =  string.gsub(destName, \"%-[^|]+\", \"\") -- remove realm names, if any\n      \n      for k,v in pairs(aura_env.hasDebuffTable) do -- for every player that has the debuff\n         \n         if v == name then -- check if their name matches\n            table.remove(aura_env.debuffTimer, k) -- remove the items from the table.\n            table.remove(aura_env.hasDebuffTable, k)\n         end\n         \n         \n      end\n      \n   end\n   return true \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
		}, -- [14]
		{
			["locked"] = true,
			["name"] = "CLASS COLORS",
			["content"] = "aura_env.setClassColor = function(name) -- local function to determine the player class and color it\n   local class = select(2, UnitClass(name))\n   \n   local colorText = RAID_CLASS_COLORS[class] and RAID_CLASS_COLORS[class].colorStr or \"ffbbbbbb\"\n   name = \"|c\"..colorText..name..\"|r\"\n   \n   return name\n   \nend",
		}, -- [15]
		{
			["locked"] = false,
			["name"] = "table tut",
			["content"] = "--table intro\n\n--string.format(\"Now: %d %s|nNext: %d %s\", aura_env.Ability_Counter, aura_env.setClassColor(\"Manager\"), aura_env.Ability_Counter + 1, aura_env.setClassColor(\"Alcuone\"))\n\n--[[\nlocal tbl = {\"Manager\", \"Krazyito\"} \ntable.insert(tbl, \"Rogue\")\n\nlocal Ability_Counter = 1\n\nfor i=1, #tbl do\n   if Ability_Counter == 1 then\n      print (string.format(\"Now: %s %s|nNext: %d %s\", tostring(i),  tostring(tbl[i]), tostring(i + 1),  tostring(tbl[i+1])))\n      \n   elseif Ability_Counter == 3 then\n      print (string.format(\"Now: %s %s\", tostring(i),  tostring(tbl[i])))\n   end\n   Ability_Counter = Ability_Counter + 1\n   \nend\n\n\nfor i,v in ipairs(tbl) do\n   \n   local value = select(2, next(tbl, i))\n   -- print (index,value)\n   \n   if Ability_Counter == 1 then\n      --local _,value =  next(tbl, i)\n      -- print (string.format(\"Now: %d %s\\nNext: %d %s\\n\", (i),  (v), (i + 1), value ))\n   elseif Ability_Counter == 2 then\n      --local _,value =  next(tbl, i)\n      -- print (string.format(\"Now: %d %s\\nNext: %d %s\\n\", (i),  (v), (i + 1), value ))\n      \n   elseif Ability_Counter == 3 then\n      --print (string.format(\"Now: %d %s\\n\", i,  v))\n   end\n   Ability_Counter = Ability_Counter + 1\n   \n   \n   \nend]]\n\n\nlocal tokens    = {\n   127956,127959,127966, -- helm\n   127955,127960,127965, -- legs\n   127954,127958,127964, -- gloves\n   127957,127961,127967, -- shoulders\n   127953,127962,127963, -- chest\n   127969,127968,127970, -- trinket\n   119310,119323,119316 -- 'Multi' slot token\n}\n\nfor k,v in ipairs(tokens) do\n   print(k,v)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
		}, -- [16]
	},
	["untitled"] = 31,
}
